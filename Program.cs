using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using TaskHub.Controllers;
using TaskHub.Data;
using TaskHub.Hubs;
using TaskHub.Models;
using TaskHub.Services;
using TaskHub.Services.PlayListServices;
using TaskHub.PlaylistWorker;

var builder = WebApplication.CreateBuilder(args);

// ===========================
// üîå Database Configuration
// ===========================
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection")
    ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");

builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connectionString));

builder.Services.AddDatabaseDeveloperPageExceptionFilter();

// ===========================
// üë§ Identity Configuration
// ===========================
builder.Services.AddDefaultIdentity<AppUser>(options =>
{
    options.SignIn.RequireConfirmedAccount = true;
})
.AddEntityFrameworkStores<ApplicationDbContext>();

// ===========================
// ‚öô MVC & Razor Pages
// ===========================
builder.Services.AddControllersWithViews();
builder.Services.AddRazorPages();

// ===========================
// üß© Application Services
// ===========================
builder.Services.AddScoped<UserService>();
builder.Services.AddScoped<PlaylistService>();
builder.Services.AddScoped<TaskService>();
builder.Services.AddScoped<TeamService>();
builder.Services.AddScoped<InviteService>();
builder.Services.AddHttpContextAccessor();

// ===========================
// üß† –ü–ª–µ–π–ª—ñ—Å—Ç-—Å–µ—Ä–≤—ñ—Å–∏ (WS/—Ä–µ–∞–ª—å–Ω—ñ/—Ñ–µ–π–∫–æ–≤—ñ)
// ===========================
builder.Services.AddScoped<IWS_Service, FakeWS_Service>();
// –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à PlaylistService –≤–∂–µ –≤–∏—â–µ ‚Äî –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ —Ç—Ä–µ–±–∞

// ===========================
// ‚öôÔ∏è –§–æ–Ω–æ–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤ + SignalR
// ===========================
builder.Services.AddSingleton<IBackgroundTaskQueue, BackgroundTaskQueue>(); // Task queue
builder.Services.AddHostedService<PlaylistWorker>(); // Worker that handles queue
builder.Services.AddSignalR(); // SignalR support

// ===========================
// üöÄ App Build
// ===========================
var app = builder.Build();

// ===========================
// üåê Middleware Configuration
// ===========================
if (app.Environment.IsDevelopment())
{
    app.UseMigrationsEndPoint();
}
else
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();
app.UseAuthentication(); // –î–æ–¥–∞–π, —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à Identity
app.UseAuthorization();

// ===========================
// üì° SignalR Hub Routing
// ===========================
app.MapHub<ProgressHub>("/progressHub");

// ===========================
// üì¶ MVC Routing
// ===========================
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.MapRazorPages();

app.Run();
